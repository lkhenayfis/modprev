% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/misc.r
\name{localizaconf}
\alias{localizaconf}
\title{Detecção De Arquivo De Configuração}
\usage{
localizaconf(path, nome = "conf.jsonc")
}
\arguments{
\item{path}{caminho completo até o diretório onde o arquivo de configuração se  encontra.
Ver Exemplo}

\item{nome}{o nome do arquivo, com extensão. O nome pode variar, mas deve necessariamente ser um
"json" ou "jsonc"}
}
\value{
lista contendo o caminho ate arquivo localizado no primeiro elemento e lista de
configuracoes no segundo
}
\description{
Busca arquivo de configuração segundo regras que contemplam a execução operacional
}
\details{
Esta função não é necessária para uso do pacote. Ela existe e é fornecida apenas para facilitar
as distintas aplicações, removendo a necessidade de repetir esse código para achar a configuração
em todos os arquivos. Cada aplicação terá seu conjunto de configurações necessárias, de modo que
isto deve ser especificado claramente em cada projeto, não aqui.

O caminho de busca e composto por tres diretorios:
\enumerate{
\item diretorio de trabalho atual
\item diretorio um nivel acima do de trabalho
\item caminho composto a partir de \code{file_p} e argumento \code{path_principal}
}

As opcoes 1 e 2 sao dedicadas às rodadas via linha de comando e sessões interativas,
respectivamente. A terceira opcao é necessária quando o script for rodado de dentro do codigo
principal da eólica. Nesse caso, \code{file_p} corresponderá normalmente ao caminho do D: de uma
das máquinas virtuais, de modo que \code{path_principal} precisa conter o restante do trajeto até
o diretório onde o arquivo de configuração se encontra. Ver Exemplos
}
\examples{

\dontrun{
# numa rodada pelo codigo principal, file_p sera criado como, por exemplo
file_p <- "D:/ModeloPrevEolico"

# a funcao deve entao ser chamada como
path <- file.path(file_p, "ModEolPtoConex/VersaoAutomatica/pasta/contendo/conf")
localizaconf(path)
}

}
